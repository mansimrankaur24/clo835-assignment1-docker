name: Build Docker Image and Push to ECR

on: 
  push:
    branches: [ master ]

jobs:
  build:    
    name: Build Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ecr_repo: [cats, dogs]
        
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1
        
    - name: Build docker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPO_PREFIX: assign1-dev
        #ECR_REPO: cats dogs
        IMAGE_TAG: v0.2
      run: |
        #for repo in $ECR_REPO; do
          #cd cats-and-dogs/${repo}/
          cd cats-and-dogs/${{ matrix.ecr_repo }}/
          ls -ltra
          docker build -t $ECR_REGISTRY/$ECR_REPO_PREFIX-${{ matrix.ecr_repo }}:$IMAGE_TAG .
          if [[ ${repo} == 'cats' ]]; then
            port=8080
            echo "Port set to 8080 for cats app"
          else
            port=8081
            echo "Port set to 8081 for dogs app"
          fi
          docker run -d -p $port:80 --name ${{ matrix.ecr_repo }}-app $ECR_REGISTRY/$ECR_REPO_PREFIX-${{ matrix.ecr_repo }}:$IMAGE_TAG
          docker ps
          echo "Pause for 10 seconds to let container start"
          sleep 10
          curl localhost:$port -vvv
          docker push $ECR_REGISTRY/$ECR_REPO_PREFIX-${{ matrix.ecr_repo }}:$IMAGE_TAG
          #changing code directory back to original for next iteration
          cd - > /dev/null
        #done
